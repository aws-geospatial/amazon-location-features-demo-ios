# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Run unit tests"
  lane :run_unit_tests do |options|
    scan(
      project: "LocationServices.xcodeproj",
      device: options[:device],
      scheme: "LocationServicesUnitTests",
      code_coverage: true,
      xcargs: "-test-iterations '3' -retry-tests-on-failure"
    )
    xcov(
      project: "LocationServices.xcodeproj",
      scheme: "LocationServicesUnitTests",
      minimum_coverage_percentage: 25.0,
      ignore_file_path: ".xcovignore", # if you want to ignore some files
      output_directory: "xcov_output", # Directory where your coverage report will be stored
      only_project_targets: true
    )
  end

  desc "Run e2e tests"
  lane :run_e2e_tests do |options|
    begin
      run_tests(
        project: "LocationServices.xcodeproj",
        device: options[:device],
        scheme: "LocationServices",
        result_bundle: true,
        code_coverage: true,
        output_directory: Dir.pwd + "/test_output",
        include_simulator_logs: true,
        xcargs: "-test-iterations '5' -retry-tests-on-failure"
      )
    
    # Fetch xcresult path
    xcresult_path = Actions.lane_context[SharedValues::SCAN_GENERATED_XCRESULT_PATH]
    
    # Use a helper or some logic to inspect the xcresult file for final test status
    sh("xcrun xcresulttool get --path #{xcresult_path} --format json > result.json")
    
    # Parse result.json and check if tests were passed on the last attempt
    result = JSON.parse(File.read("result.json"))
    failed_tests = result["issues"]["testFailures"]
    
    # If all tests have eventually passed, don't fail the lane
    if failed_tests.nil? || failed_tests.empty?
      UI.success("All tests passed eventually after retries.")
    else
      UI.user_error!("Some tests still failed after retries.")
    end

    ensure
      xcresult_path = Actions.lane_context[SharedValues::SCAN_GENERATED_XCRESULT_PATH]
      sh("echo xcresult_path=" + xcresult_path + " >> $GITHUB_ENV")
    end
  end

  desc "Build and upload to Testflight"
  lane :build_distribute do |options|
    increment_build_number(
      xcodeproj: "LocationServices.xcodeproj",
      build_number: options[:build_number]
    )
    setup_ci if ENV['CI']
    app_store_connect_api_key(
      key_id: options[:key_id],
      issuer_id: options[:issuer_id],
      key_content: options[:key_content],
      is_key_content_base64: true
    )
    match(type: "appstore")
    build_app(
      scheme: "LocationServices",
    )
    upload_to_app_store(
        skip_metadata: true,
        skip_screenshots: true,
        precheck_include_in_app_purchases: false
    )
  end
end
